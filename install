#!/bin/bash

# 1. Sets up a local Python environment via virtualenv
# 2. Installs Ansible prerequisites
# 3. Hands off to Ansible to complete actual installation of dotfiles etc

set -e

ANSIBLE_ENV_SETUP=vendor/ansible/hacking/env-setup
VIRTUALENV_SETUP=vendor/virtualenv/virtualenv.py
VIRTUALENV_TARGET_DIR=python
VIRTUALENV_ACTIVATE=$VIRTUALENV_TARGET_DIR/bin/activate

DEV_NULL=/dev/null

if [ ! -e $VIRTUALENV_SETUP ]; then
  echo "Not found: $VIRTUALENV_SETUP"
  echo "Did you forget to 'git submodule update --init --recursive'?"
  exit 1
fi

if [ ! -e $ANSIBLE_ENV_SETUP ]; then
  echo "Not found: $ANSIBLE_ENV_SETUP"
  echo "Did you forget to 'git submodule update --init --recursive'?"
  exit 1
fi

if [[ ! -e $VIRTUALENV_ACTIVATE || $FORCE ]]; then
  python $VIRTUALENV_SETUP $VIRTUALENV_TARGET_DIR &> $DEV_NULL
elif [ -e $VIRTUALENV_ACTIVATE ]; then
  echo "Skipping virtualenv install (already exists); use --force to override"
fi

source $VIRTUALENV_ACTIVATE

# Troubleshooting during OS upgrades, or new machine installs: may need:
#
#   sudo -H pip install --upgrade cryptography
#   pip install --upgrade pip
#
if [[ -z $(pip show paramiko PyYAML Jinja2 httplib2) || $FORCE ]]; then
  if ! pip install paramiko pycrypto PyYAML Jinja2 httplib2 &> $DEV_NULL; then
    echo "Failed: pip install"
    echo "Did you forget to 'export https_proxy=fwdproxy:8080' or similar?"
    exit 1
  fi
elif [[ ! $FORCE ]]; then
  echo "Skipping pip installs (already exists); use --force to override"
fi

source vendor/ansible/hacking/env-setup &> $DEV_NULL

ROLES="--tags dotfiles"
HOST_OS=$(uname)

if [ "$HOST_OS" = 'Darwin' ]; then
  ansible-playbook --ask-become-pass ${ROLES} darwin.yml
elif [ "$HOST_OS" = 'Linux' ]; then
  ansible-playbook ${ROLES} linux.yml
else
  echo "Unknown host OS: $HOST_OS"
  exit 1
fi
